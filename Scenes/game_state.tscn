[gd_scene load_steps=2 format=3 uid="uid://sqdu0o41o4ke"]

[sub_resource type="GDScript" id="GDScript_xo7p1"]
script/source = "extends Node

func _process(float):
    update_gui()
    

\"\"\"
Take value i and return 1 if the type is TYPE_FLOAT
else return 0
\"\"\"
func _private_is_float(i) -> int:
    if typeof(i) == TYPE_FLOAT:
        return 1
    else:
        return 0

\"\"\"
Take value i and return 1 if the type is TYPE_INT
else return 0
\"\"\"
func _private_is_int(i) -> int:
    if typeof(i) == TYPE_INT:
        return 1
    else:
        return 0

\"\"\"
Take a string in input, input is name of var and value 
the new value of var
Return 1 if sucess else -1
\"\"\"
func modify_input(v: String, value) -> int:
    if _private_is_float(value):
        match v:
            \"light\":
                print(\"[*] modify ligh\")
                GameVar.game_intput[\"light\"] = value
                return 1
            \"dilution\":
                print(\"[*] modify dilution\")
                GameVar.game_intput[\"dilution\"] = value
                return 1
            \"glucose\":
                print(\"[*] modify glucose\")
                GameVar.game_intput[\"glucose\"] = value
                return 1
            \"algae\":
                print(\"[*] modify algae\")
                GameVar.game_intput[\"algae\"] = value
                return 1
            \"yield_reactor\":
                print(\"[*] modify yield_reactor\")
                GameVar.game_intput[\"yield_reactor\"] = value
                return 1
            \"glucose\":
                print(\"[*] modify glucose\")
                GameVar.game_intput[\"glucose\"] = value
                return 1
            _:
                printerr(\"[-] Error name var input in modify_input\")
                return -1
    if _private_is_int(value):
        match v:
            \"day\":
                print(\"[*] modify day\")
                GameVar.game_intput[\"day\"] = value
                return 1
            _:
                printerr(\"[-] Error name var input input in modify_input\")
                return -1
    printerr(\"[-] Error value is invalid in modify_input\")
    return -1


func update_gui():
    pass

\"\"\"
Check if the playe is death
Return 1 if player death else 0
\"\"\"
func check_death() -> int:
    #Playe wasn't immunity
    if GameVar.time[\"day\"] >= GameVar.immunity_day:
        if GameVar.game_output[\"algae\"] <= 0.0:
            return 1
        else:
            return 0
    return 0

func check_production():
    pass

\"\"\"
Update gamestate for new day
\"\"\"
func progress_day():
    update_output()
    _private_update_day()

\"\"\"
Calcul the new value of output for new day
\"\"\"
func update_output():
    #TODO: Place reel equation
    GameVar.game_output[\"algae\"] += 0.1
    GameVar.game_output[\"yield_reactor\"] += 0.1
    GameVar.game_output[\"glucose\"] += 0.1
    

\"\"\"
Update time game (add 1 to day)
\"\"\"
func _private_update_day():
    GameVar.game_time[\"day\"] += 1

\"\"\"
Print all var in terminal 
\"\"\"
func print_all_vars():
    print(\"immunity_day: \", GameVar.immunity_day)
    print(\"game_intput: \", GameVar.game_intput)
    print(\"game_output: \", GameVar.game_output)
    print(\"time: \", GameVar.time)

include(\"res://Script/GameVar.gd\")

func _on_algae_button_pressed():
    
func update_text():
    $algueslabel.text = \"Algues : %s\" %algues


func create_algues():
    algues =+ 1
    update_text()
    
    
func _on_alguesbouton_pressed():
    create_algues()



func _on_light_button_pressed():
    


func _on_day_button_pressed():
    


func _on_credits_button_pressed():
    
"

[node name="GameState2" type="Node"]
script = SubResource("GDScript_xo7p1")

[node name="MenuMargin" type="MarginContainer" parent="."]
size_flags_vertical = 3
theme_override_constants/margin_top = 16
theme_override_constants/margin_bottom = 16

[node name="MenuButtons" type="VBoxContainer" parent="MenuMargin"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
theme_override_constants/separation = 16
alignment = 1

[node name="algaebuttons" type="Button" parent="MenuMargin/MenuButtons"]
unique_name_in_owner = true
custom_minimum_size = Vector2(128, 40)
layout_mode = 2
text = "Play"

[node name="lightbutton" type="Button" parent="MenuMargin/MenuButtons"]
unique_name_in_owner = true
custom_minimum_size = Vector2(128, 40)
layout_mode = 2
text = "Options
"

[node name="CreditsButton" type="Button" parent="MenuMargin/MenuButtons"]
unique_name_in_owner = true
custom_minimum_size = Vector2(128, 40)
layout_mode = 2
text = "Credits"

[node name="daybutton" type="Button" parent="MenuMargin/MenuButtons"]
unique_name_in_owner = true
custom_minimum_size = Vector2(128, 40)
layout_mode = 2
text = "Exit"

[connection signal="pressed" from="MenuMargin/MenuButtons/algaebuttons" to="." method="_on_light_button_pressed"]
[connection signal="pressed" from="MenuMargin/MenuButtons/lightbutton" to="." method="_on_algae_button_pressed"]
[connection signal="pressed" from="MenuMargin/MenuButtons/CreditsButton" to="." method="_on_credits_button_pressed"]
[connection signal="pressed" from="MenuMargin/MenuButtons/daybutton" to="." method="_on_day_button_pressed"]
